#!/usr/bin/env python3
"""
Script de restauration des donn√©es depuis une sauvegarde locale vers PostgreSQL
Restaure les fichiers JSON depuis un dossier de sauvegarde vers PostgreSQL
"""

import os
import psycopg2
import json
import glob
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

def get_postgres_connection():
    """√âtablit une connexion √† PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        print(f"‚ùå Erreur de connexion PostgreSQL: {e}")
        return None

def list_backup_folders():
    """Liste tous les dossiers de sauvegarde disponibles."""
    backup_folders = glob.glob("backup_postgres_*")
    backup_folders.sort(reverse=True)  # Plus r√©cent en premier
    
    if not backup_folders:
        print("‚ùå Aucun dossier de sauvegarde trouv√©")
        return None
    
    print("üìÅ Dossiers de sauvegarde disponibles:")
    for i, folder in enumerate(backup_folders, 1):
        # Lire les infos si disponibles
        info_file = os.path.join(folder, "_backup_info.json")
        if os.path.exists(info_file):
            try:
                with open(info_file, 'r') as f:
                    info = json.load(f)
                date_str = info.get('backup_date', 'Date inconnue')
                files_count = info.get('files_saved', 'Inconnu')
                print(f"  {i}. {folder} - {date_str} - {files_count} fichiers")
            except:
                print(f"  {i}. {folder}")
        else:
            print(f"  {i}. {folder}")
    
    return backup_folders

def restore_from_backup(conn, backup_folder):
    """Restaure les donn√©es depuis un dossier de sauvegarde vers PostgreSQL."""
    cursor = conn.cursor()
    
    # V√©rifier que la table json_backups existe
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS json_backups (
                id SERIAL PRIMARY KEY,
                filename VARCHAR(255) UNIQUE NOT NULL,
                content TEXT NOT NULL,
                backup_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()
        print("‚úÖ Table json_backups pr√™te")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation table: {e}")
        return 0
    
    # Lister tous les fichiers JSON dans le dossier
    json_files = glob.glob(os.path.join(backup_folder, "*.json"))
    json_files = [f for f in json_files if not os.path.basename(f).startswith('_')]  # Exclure _backup_info.json
    
    if not json_files:
        print(f"‚ùå Aucun fichier JSON trouv√© dans {backup_folder}")
        return 0
    
    restored_count = 0
    
    for file_path in json_files:
        filename = os.path.basename(file_path)
        
        try:
            # Lire le fichier JSON
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Valider le JSON
            json.loads(content)
            
            # Ins√©rer ou mettre √† jour dans PostgreSQL
            cursor.execute("""
                INSERT INTO json_backups (filename, content, backup_date)
                VALUES (%s, %s, %s)
                ON CONFLICT (filename) 
                DO UPDATE SET 
                    content = EXCLUDED.content,
                    backup_date = EXCLUDED.backup_date
            """, (filename, content, datetime.now()))
            
            print(f"‚úÖ {filename} restaur√©")
            restored_count += 1
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Fichier JSON invalide {filename}: {e}")
        except Exception as e:
            print(f"‚ùå Erreur restauration {filename}: {e}")
    
    # Valider les changements
    conn.commit()
    cursor.close()
    
    return restored_count

def main():
    """Fonction principale de restauration."""
    print("üîÑ RESTAURATION DEPUIS SAUVEGARDE LOCALE")
    print("=" * 50)
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # V√©rifier la variable DATABASE_URL
    if not DATABASE_URL:
        print("‚ùå ERREUR: Variable DATABASE_URL non d√©finie")
        return
    
    # Lister les sauvegardes disponibles
    backup_folders = list_backup_folders()
    if not backup_folders:
        return
    
    # Demander √† l'utilisateur de choisir
    try:
        choice = input("\nüëÜ Entrez le num√©ro du dossier √† restaurer (ou 'q' pour quitter): ").strip()
        
        if choice.lower() == 'q':
            print("‚ùå Restauration annul√©e")
            return
        
        folder_index = int(choice) - 1
        if folder_index < 0 or folder_index >= len(backup_folders):
            print("‚ùå Num√©ro invalide")
            return
        
        selected_folder = backup_folders[folder_index]
        
    except (ValueError, KeyboardInterrupt):
        print("‚ùå S√©lection annul√©e")
        return
    
    # Confirmation
    print(f"\n‚ö†Ô∏è  Vous allez restaurer depuis: {selected_folder}")
    confirm = input("ü§î Continuer ? Cette action va √©craser les donn√©es actuelles (y/N): ").strip().lower()
    
    if confirm != 'y':
        print("‚ùå Restauration annul√©e")
        return
    
    # Connexion √† PostgreSQL
    print("üîó Connexion √† PostgreSQL...")
    conn = get_postgres_connection()
    if not conn:
        return
    
    print("‚úÖ Connexion PostgreSQL √©tablie")
    
    # Restauration
    print(f"üì§ Restauration depuis {selected_folder}...")
    restored_count = restore_from_backup(conn, selected_folder)
    
    # Fermer la connexion
    conn.close()
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DE LA RESTAURATION:")
    print(f"‚úÖ Fichiers restaur√©s: {restored_count}")
    print(f"üìÅ Depuis: {selected_folder}")
    print("üîÑ Vos donn√©es ont √©t√© restaur√©es dans PostgreSQL !")
    print("=" * 50)

if __name__ == "__main__":
    main()
